include <table_utils>

procedure main(){
    stdoptions.cpsupport=false
    stdoptions.liftedunitpropagation=false
    stdoptions.groundwithbounds=false
    stdoptions.refinedefinitionswithxsb=false
    stdoptions.xsb=false
    stdoptions.joindefsforxsb=false
    stdoptions.guaranteenorecursionnegation=true
    stdoptions.splitdefs=false
    stdoptions.postprocessdefs=false
    stdoptions.reducedgrounding=false
    stdoptions.splitdefs=false
    stdoptions.nrpropsteps=0
    stdoptions.longestbranch=0
    stdoptions.nbmodels=1
    stdoptions.calculatedefinitions=false

    if(S == nil) then
        S = newstructure(V,"S")
    end

    json = require "dkjson"

    out();

    lio = json.decode(li)
    action = lio.method
    struc = lio.active


    myPropagate = nil
    if(lio.propType == "exact") then
        myPropagate = function(a,b)
            local P = aanbestedingenpropagate(a,S,b)
            return P
        end
    end
    if(lio.propType == "approx") then
        myPropagate = groundpropagate
    end
    if(lio.propType == "none") then
        myPropagate = function(x) return x end
    end


    if(settings) then
        settings();
    end

    actions = {}
    actions["init"]=initModel
    actions["propagate"]=propSelection
    actions["modelexpand"]=mx
    actions["minimize"]=mini
    actions["relevance"]=relevance
    actions["params"]=params
    actions["explain"]=explain

    local S = decodeStruc(struc)

    local result = actions[action](output,S)
    io.stdout:write(json.encode(result))

}

procedure propSelection(output,S){
    if (myPropagate == nil) then
        io.stderr:write("Unknown propagation type")
        return nil
    end

    S2 = myPropagate(T,S)

    if S2 == nil then
        io.stderr:write(tostring(S))
        return {failed = true}
    end

    return encodeStruc(S2,output)
}

procedure mini(output, S){
    S2 = minimize(T,S,t)[1]
    if S2 then
        return encodeStruc(S2,output)
    end
    return {failed = true}
}

procedure mx(output,S){
    S2 = onemodel(T,S)
    if S2 then
        return encodeStruc(S2,output)
    end
    return {failed = true}
}

procedure relevance(output,S) {
    S2 = calculaterelevants(T,S)
    if S2 then
        return encodeStruc(S2,output)
    end
    return {failed = true}
}


procedure params(output,S) {
    S2 = getparameters(T,S)
    if S2 then
        return encodeStruc(S2,output)
    end
    return {failed = true}
}

procedure explain(output,S2) {
    SOut = aanbestedingenexplainunsat(T,S,S2,newstructure(V,"S3"))
    if SOut then
        return encodeStruc(SOut,output)
    end
    return {failed = true}
}

procedure initModel(set){
    local out = {}
    for i,j in pairs(set) do
        out[j] = {}

        local others = getAll(S,j,"pt")
        for a,b in pairs(others) do
            decb = json.decode(b)
            table.insert(out[j],decb)
        end
        others = getAll(S,j,"cf")
        for a,b in pairs(others) do
            decb = json.decode(b)
            table.insert(out[j],decb)
        end
    end
    return out
}

procedure encodeStruc(S,set){
    local out = {}
    for i,j in pairs(set) do
        out[j] = encodeSymbol(S,j)
    end

    return out
}
procedure encodeSymbol(S,name){
    local out = {};

    local ct = getAll(S,name,"ct")
    local pt = getAll(S,name,"pt")
    local cf = getAll(S,name,"cf")


    for i,j in pairs(ct) do
        out[j] = {ct = true, cf = false}
    end
    for i,j in pairs(cf) do
        out[j] = { ct = false, cf = true}
    end
    for i,j in pairs(pt) do
        if out[j] == nil then
            out[j] = {ct = false, cf = false}
        end
    end

    return out
}

procedure decodeStruc(obj){
    local SD = clone(S)
    for i,j in pairs(obj) do
        decodeSymbol(SD,i,j)
    end
    clean(SD)
    return merge(S,SD)
}

procedure decodeSymbol(S,name,val){
    local cts = {}
    local cfs = {}
    local target = nil
    if(type(S[V[name]]) == "function_interpretation") then
        target = S[V[name]].graph
    else
        target = S[V[name]]
    end
    local tempTest = tostring(target.ct)
    if tempTest == "true" or tempTest == "false" then
        for i,j in pairs(val) do
            valK = json.decode(i)[1] == "true"
            valV = j
            if (valK and valV.ct) or (not valK and valV.cf) then
                S[V[name]].ct = {{}}
            end
            if (valK and valV.cf) or (not valK and valV.ct) then
                S[V[name]].cf = {{}}
            end
        end
        return
    end
    for i,j in pairs(val) do
        if(j.ct) then table.insert(cts,tablify(S,json.decode(i))) end
        if(j.cf) then table.insert(cfs,tablify(S,json.decode(i))) end
    end
    target.ct = cts
    target.cf = cfs
}

//output: list of tuples as json encoded (string array)
procedure getAll(S,name,tab){
    local out = {}
    local source = nil
    if type(S[V[name]]) == "function_interpretation" then
        source = S[V[name]].graph
    else
        source = S[V[name]]
    end

    local st = tostring(source[tab])
    if(st=="true" or st=="false") then
        local ct = tostring(source.ct) == "true"
        local cf = tostring(source.cf) == "true"

        local tr = stringify({"true"})
        local fa = stringify({"false"})

        if tab == "ct" then
            if ct then
                table.insert(out,tr)
            elseif cf then
                table.insert(out,fa)
            end
            return out
        end

        if tab == "cf" then
            if ct then
                table.insert(out,fa)
            elseif cf then
                table.insert(out,tr)
            end
            return out
        end

        if tab == "pt" then
            if ct then
                table.insert(out,tr)
            elseif not cf then
                table.insert(out,tr)
                table.insert(out,fa)
            end
            return out
        end


        io.stderr:write("Unknown table:",tab,"\n")
        return out
    else
        for tup in tuples(source[tab]) do
            table.insert(out,stringify(totable(tup)))
        end
    end
    return out
}

//domain tuple -> JSON encoded (string array)
procedure stringify(inp){
    local out = {}
    for i,j in pairs(inp) do
        if type(j) ~= "string" then
            j = tostring(j)
        end
        table.insert(out,j)
    end
    return json.encode(out)
}

//interpret an array as a domain tuple
procedure tablify(S,inp){
    local out = {}
    for i,j in pairs(inp) do
        table.insert(out,interpret(S,j))
    end
    return out
}

//interpret a string as a domain element
procedure interpret(S,j){
    local typing = string.match(j,"\[^%[]*%[ : ([^%]]*)")
    local construct, args = string.match(j,"([^%(]+)%((.*)%)")
    if construct == nil then
        construct = string.match(j,"([^%[]+)")
    end
    local argList
    if args ==nil then
        argList = {}
    else
        args = args .. ","
        local sep = ","
        argList = {args:match((args:gsub("[^"..sep.."]*"..sep, "([^"..sep.."]*)"..sep)))}
    end

    for i,v in ipairs(argList) do
        argList[i] = interpret(S,v)
    end

    if(V[construct] ~= nil and typing ~= nil) then
        return S[V[construct][{V[typing].type}]](unpack(argList))
    elseif (V[construct] ~= nil) then
        return S[V[construct]](unpack(argList))
    elseif (tonumber(j)) then
        return tonumber(j)
    else
        return j
    end
}
