vocabulary V {
    type Domain = {a;b;c} isa string
    type Nums = {0..9} isa int
    type Nums2 = {0..3} isa int
    type Nums3 = {1..3} isa int

    Edge(Domain,Domain)
    Closure(Domain,Domain)

    AantalEdges : Nums

    FullyConnected

    NumberOfNeighbours(Domain) : Nums2
    Symmetric
    Reflexive

    Components : Nums3

    TrClosed
}

theory T : V{

    {
      TrClosed <- ! a b : Edge(a,b) <=> Closure(a,b).
    }
    {
      Symmetric <- ! a b: Edge(a,b) <=> Edge(b,a).
    }
    {
      Reflexive <- ! a: Edge(a,a).
    }

    {
      Components = 1 <- FullyConnected.
      Components = 2 <- Components ~= 1 & Components ~= 3.
      Components = 3 <- ! a b : Closure(a,b) => a = b.
    }
    {
        Closure(x,y)<- Edge(x,y).
        Closure(x,y) <-?z : Edge(x,z) & Closure(z,y).
    }
    {
        AantalEdges = #{x y : Edge(x,y)}.
    }
    {
        FullyConnected <- ! x y : Closure(x,y).
    }

    {
        NumberOfNeighbours(d) = #{x : Edge(d,x) | Edge(x,d)}.
    }
    NumberOfNeighbours('a') = NumberOfNeighbours('a').

}
